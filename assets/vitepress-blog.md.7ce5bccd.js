import{o as n,c as s,a}from"./app.d2162012.js";const t='{"title":"基于 vitepress 搭建的极简博客","description":"","frontmatter":{"title":"基于 vitepress 搭建的极简博客","date":"2021-06-26","tags":["vue"],"describe":"基于 vitepress 搭建一个简单的个人博客站点"},"headers":[{"level":2,"title":"基于 vitepress 搭建的极简博客","slug":"基于-vitepress-搭建的极简博客"},{"level":3,"title":"Why","slug":"why"},{"level":3,"title":"How","slug":"how"},{"level":3,"title":"自定义布局","slug":"自定义布局"}],"relativePath":"vitepress-blog.md","lastUpdated":1633703210765}',p={},o=[a('<h2 id="基于-vitepress-搭建的极简博客"><a class="header-anchor" href="#基于-vitepress-搭建的极简博客" aria-hidden="true">#</a> 基于 vitepress 搭建的极简博客</h2><p><em>未完</em> 在线预览地址：<a href="https://blog.zhaojinxing.com" target="_blank" rel="noopener noreferrer">https://blog.zhaojinxing.com</a></p><p>已完成</p><ul><li>[x] 文章列表渲染</li><li>[x] 文章详情</li><li>[x] 深色模式适配</li><li>[x] 按标签分类</li><li>[x] 按时间轴归档</li></ul><p>待完成</p><ul><li>[ ] 文章列表分页</li><li>[ ] 美化</li><li>[ ] 暂时这些，想到什么再说</li></ul><h3 id="why"><a class="header-anchor" href="#why" aria-hidden="true">#</a> Why</h3><p>博客虽然不怎么写，但是写博客的东西却没少折腾。WordPress，HEXO 都瞎搞过，虽然可以选择的主题有很多，但总感觉并不是自己想要的。 后来发现了 vitepress，是基于 vite + vue3 的，内容可以很方便的进行定制。另一点 vue3 的稳定版也出来好久了，但实际开发项目中没机会用到，刚好在这里也可以折腾一下 vue3。</p><h3 id="how"><a class="header-anchor" href="#how" aria-hidden="true">#</a> How</h3><p>直接按照官网的 <a href="https://vitepress.vuejs.org/guide/getting-started.html" target="_blank" rel="noopener noreferrer">Get Start</a> 初始化项目。初始化后项目目录如下：</p><div class="language-"><pre><code>├── docs\n|  ├── index.md\n|  └── .vitepress\n|     └── config.js\n├── package.json\n└── yarn.lock\n</code></pre></div><p>然后在 <code>package.json</code> 中加入以下代码：</p><div class="language-json"><pre><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vitepress dev docs&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vitepress build docs&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vitepress serve docs&quot;</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><p>运行 <code>yarn dev</code> 便可以启动项目了，但是默认配置作为一个博客网站肯定是不行的，最起码的导航、文章列表、归档、分类等功能还是要有的。在 <code>docs</code> 目录下新建两个文件夹： tags、archives，并分别在<code>docs/.vitepress/config.js</code> 配置如下：</p><div class="language-js"><pre><code><span class="token keyword">const</span> getPages <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./utils/pages&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">getConfig</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n    lang<span class="token operator">:</span> <span class="token string">&#39;zh-CN&#39;</span><span class="token punctuation">,</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;hello vitepress&#39;</span><span class="token punctuation">,</span>\n    description<span class="token operator">:</span> <span class="token string">&#39;这里是描述&#39;</span><span class="token punctuation">,</span>\n    themeConfig<span class="token operator">:</span> <span class="token punctuation">{</span>\n      pages<span class="token operator">:</span> <span class="token keyword">await</span> <span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      nav<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">&#39;首页&#39;</span><span class="token punctuation">,</span> link<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">&#39;归档&#39;</span><span class="token punctuation">,</span> link<span class="token operator">:</span> <span class="token string">&#39;/archives/&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">&#39;分类&#39;</span><span class="token punctuation">,</span> link<span class="token operator">:</span> <span class="token string">&#39;/tags/&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> config\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>这里的配置可以通过 vitepress 内置的 <code>useSiteData</code> 拿到，其中 <code>getPages</code> 函数是用来获取 <code>markdown</code> 文件的，实现如下：</p><div class="language-js"><pre><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mz/fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> globby <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;globby&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> matter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;gray-matter&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">rTime</span><span class="token punctuation">(</span><span class="token parameter">date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// new Date(undefined).toJSON() returns null</span>\n  <span class="token keyword">const</span> json_date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> json_date<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function">compareDate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj1<span class="token punctuation">,</span> obj2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> obj1<span class="token punctuation">.</span>frontMatter<span class="token punctuation">.</span>date <span class="token operator">&lt;</span> obj2<span class="token punctuation">.</span>frontMatter<span class="token punctuation">.</span>date <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 不包含 README 文件</span>\n  <span class="token keyword">const</span> paths <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">globby</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;**.md&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;!**/README.md&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    ignore<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> pages <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>\n    paths<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">matter</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>\n      data<span class="token punctuation">.</span>date <span class="token operator">=</span> <span class="token function">rTime</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>date<span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        frontMatter<span class="token operator">:</span> data<span class="token punctuation">,</span>\n        regularPath<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;.md&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        relativePath<span class="token operator">:</span> item<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n  <span class="token comment">// 过滤掉 page 为 true 的 Markdown</span>\n  pages <span class="token operator">=</span> pages<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>item<span class="token punctuation">.</span>frontMatter<span class="token punctuation">.</span>page<span class="token punctuation">)</span>\n\n  pages<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>compareDate<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> pages\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="自定义布局"><a class="header-anchor" href="#自定义布局" aria-hidden="true">#</a> 自定义布局</h3><p>在 docs/.vitepress 目录下新建 theme 文件夹，在 theme 目录下新建入口文件 <code>index.js</code> 和布局组件 <code>Layout.vue</code>。index.js 内容如下：</p><div class="language-js"><pre><code><span class="token keyword">import</span> DefaultTheme <span class="token keyword">from</span> <span class="token string">&#39;vitepress/theme&#39;</span>\n<span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">&#39;./Layout.vue&#39;</span>\n<span class="token keyword">import</span> Tags <span class="token keyword">from</span> <span class="token string">&#39;./components/Tags.vue&#39;</span>\n<span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">&#39;./components/Home.vue&#39;</span>\n<span class="token keyword">import</span> Archives <span class="token keyword">from</span> <span class="token string">&#39;./components/Archives.vue&#39;</span>\n<span class="token keyword">import</span> <span class="token string">&#39;./style/index.styl&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>DefaultTheme<span class="token punctuation">,</span>\n  Layout<span class="token punctuation">,</span>\n  <span class="token function">enhanceApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> app<span class="token punctuation">,</span> route<span class="token punctuation">,</span> siteData <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;Tags&#39;</span><span class="token punctuation">,</span> Tags<span class="token punctuation">)</span>\n    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;Home&#39;</span><span class="token punctuation">,</span> Home<span class="token punctuation">)</span>\n    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;Archives&#39;</span><span class="token punctuation">,</span> Archives<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><p>其中 DefaultTheme 是 vitepress 内置的默认主题，我们在其之上进行扩展，Tags 为标签页组件，Archives 为归档组件，Home 为主页内容。这三个组件全局注册，接下来就可以在 markdown 文件中直接使用。比如在 <code>docs/index.md</code> 中：</p><div class="language-"><pre><code>---\npage: true\nhome: true\ndate: 2021-01-03\ntitle: 首页\ndescribe: 首页\n---\n\n&lt;Home /&gt;\n</code></pre></div><p>这样 Home 组件的内容就会被渲染到首页中。Layout 为首页布局的组件，这里我直接使用默认的 Layout 结合其插槽进行了布局，如果想要更多的个性化定制，可以完全按照自己想要的样子来写，我的 Layout 内容如下：</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> DefaultTheme <span class="token keyword">from</span> <span class="token string">&#39;vitepress/theme&#39;</span>\n<span class="token keyword">import</span> HomeHeader <span class="token keyword">from</span> <span class="token string">&#39;./components/HomeHeader.vue&#39;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> Layout <span class="token punctuation">}</span> <span class="token operator">=</span> DefaultTheme\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Layout</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#home-hero</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>home-header</span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Content</span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Layout</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>其中 <code>&lt;Content /&gt;</code> 组件是 vitepress 内置的组件，它将会渲染 <code>docs/index.md</code> 中的内容，<code>HomeHeader</code> 是首页自定义的头部内容，但是由于 vitepress 已经有了默认的 header，而且没有提供自定义的插槽，因此需要给默认的 header 加一个额外的样式 <code>display: none</code> 把它干掉，这样就可以自定义 header 了，在全局加上以下样式就可以了：</p><div class="language-stylus"><pre><code><span class="token selector">.home</span>\n  <span class="token selector">header.home-hero:first-child</span>\n    <span class="token property-declaration"><span class="token property">display</span><span class="token punctuation">:</span> none</span>\n</code></pre></div><p>这样就基本上完成了一个可以自定义首页，有标签页，有归档页的简单博客网站了。</p>',27)];p.render=function(a,t,p,e,c,l){return n(),s("div",null,o)};export{t as __pageData,p as default};
