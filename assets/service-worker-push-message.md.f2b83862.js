import{o as n,c as s,a}from"./app.55d966ac.js";const p='{"title":"给你的 web 应用添加推送功能","description":"","frontmatter":{"title":"给你的 web 应用添加推送功能","date":"2019-07-23","tags":["JavaScript","浏览器"],"describe":"通过 service-worker 实现网站的离线推送"},"headers":[{"level":3,"title":"给你的 web 应用添加推送功能","slug":"给你的-web-应用添加推送功能"}],"relativePath":"service-worker-push-message.md","lastUpdated":1624692671977}',t={},o=a('<h3 id="给你的-web-应用添加推送功能"><a class="header-anchor" href="#给你的-web-应用添加推送功能" aria-hidden="true">#</a> 给你的 web 应用添加推送功能</h3><p><em>如果你经常浏览 Facebook 或者 YouTube 等网站，你可能会发现，有时候并没有打开网站，却收到了网站的推送，像下面这样：</em></p><p><img src="https://i.loli.net/2019/07/22/5d34ffdb157bb79694.png" alt="屏幕快照 2019-07-21 10.20.27.png"></p><p><strong>屏幕快照 2019-07-21 10.20.27.png</strong></p><p>这是如何做到的呢？这其实是利用了 service worker 和 浏览器的 Notification 功能，但为什么国内的网站几乎很少见到呢？因为推送是通过浏览器厂商下发的，chrome 浏览器占据着市场的大部分份额，而得益于我们强大的 GFW，在国内添加这个功能就显得吃力不讨好了。不过在 Firefox 和 EDGE 浏览器上还是可以的，尤其是 EDGE 浏览器，win10 下即使浏览器关闭了也能收到推送(微软亲儿子的原因？)。</p><h4 id="_1-service-worker"><a class="header-anchor" href="#_1-service-worker" aria-hidden="true">#</a> 1. Service Worker</h4><p>那什么是 service worker 呢？MDN 上的介绍为：<em>Service workers 本质上充当 Web 应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。它们旨在（除其他之外）使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步 API。</em> 我们这里主要用到的就是 service worker 的推送通知功能。</p><h4 id="_2-发送通知的过程"><a class="header-anchor" href="#_2-发送通知的过程" aria-hidden="true">#</a> 2. 发送通知的过程</h4><p>大致流程如下</p><p><img src="https://i.loli.net/2019/07/22/5d35bfe56904257934.png" alt="屏幕快照 2019-07-22 21.53.20.png"></p><p><strong>屏幕快照 2019-07-22 21.53.20.png</strong></p><h5 id="_2-1-注册-service-worker"><a class="header-anchor" href="#_2-1-注册-service-worker" aria-hidden="true">#</a> 2.1.注册 service worker</h5><p>通过 npm 包 register-service-worker 来注册 service worker，当然你也可以自己写。以在 vue 中使用为例：</p><p>在 src 目录下新建文件 registerServiceWorker.js</p><p>在 public 目录下新建文件 <code>sw.js</code></p><div class="language-javascript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> register <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;register-service-worker&#39;</span>\n<span class="token function">register</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">sw.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token keyword">async</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token parameter">registration</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Service worker is active.&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> userSubscription <span class="token operator">=</span> <span class="token keyword">await</span> registration<span class="token punctuation">.</span>pushManager<span class="token punctuation">.</span><span class="token function">getSubscription</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>userSubscription <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;用户已订阅&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 发起订阅</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>这样便完成了 service worker 的注册，但现在我们的 service worker 还是空的，因为 sw.js 里还没有任何东西</p><h5 id="_2-2-发起订阅"><a class="header-anchor" href="#_2-2-发起订阅" aria-hidden="true">#</a> 2.2 发起订阅</h5><p>发起订阅首先需要一对秘钥，私钥存在服务端，公钥发给客户端，用来生成 subscription，本例中我们通过 web-push 库来生成公私密钥对</p><div class="language-js"><pre><code><span class="token comment">// 发起订阅，首先请求本地启动的node服务，取得publicKey</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3333/api/appKey&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> publicKey <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> result<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>获取的<code>publicKey</code>为 base64 编码，不能直接使用，需要将其转为 Uint8Array，通过以下函数将其转为 Uint8Array:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">urlBase64ToUint8Array</span><span class="token punctuation">(</span><span class="token parameter">base64String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> padding <span class="token operator">=</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> <span class="token punctuation">(</span>base64String<span class="token punctuation">.</span>length <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> base64 <span class="token operator">=</span> <span class="token punctuation">(</span>base64String <span class="token operator">+</span> padding<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">_</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> rawData <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">atob</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span>\n  <span class="token keyword">var</span> outputArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>rawData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> rawData<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    outputArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rawData<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> outputArray\n<span class="token punctuation">}</span>\n</code></pre></div><p>接下来调用 subscribe 方法来生成 subscription：</p><div class="language-js"><pre><code><span class="token keyword">const</span> subscription <span class="token operator">=</span> <span class="token keyword">await</span> registration<span class="token punctuation">.</span>pushManager<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  userVisibleOnly<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  applicationServerKey<span class="token operator">:</span> <span class="token function">urlBase64ToUint8Array</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 将订阅信息发送到服务器存储</span>\n<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3333/api/subscribe&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>\n  body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>subscription<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  headers<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token string">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>然后再 main.js 里引入 registerServiceWorker.js。至此，我们已经订阅完成，并将订阅信息发送到服务器了，在 chrome 的调试工具中打开 application，选择 service worker 已经可以看到我们注册的 service worker 了, firefox 浏览器通过在地址栏输入 about:serviceworkers 来查看</p><p><img src="https://i.loli.net/2019/07/22/5d35d73d3cc5c95634.png" alt="屏幕快照 2019-07-22 23.33.05.png"></p><p><strong>屏幕快照 2019-07-22 23.33.05.png</strong></p><h5 id="_2-3-sw-js-监听-push"><a class="header-anchor" href="#_2-3-sw-js-监听-push" aria-hidden="true">#</a> 2.3 sw.js 监听 push</h5><p>接下来我们要在注册的 sw.js 中监听 push 事件，通过 sw.js 来显示系统通知</p><div class="language-js"><pre><code><span class="token comment">// sw.js</span>\n<span class="token comment">// 监听推送事件</span>\nself<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;push&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;service worker 收到推送信息&#39;</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">推送内容为：&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token string">&#39;PUSH TEST&#39;</span>\n  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n    body<span class="token operator">:</span> <span class="token string">&#39;收到一条通知&#39;</span>\n  <span class="token punctuation">}</span>\n  event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>registration<span class="token punctuation">.</span><span class="token function">showNotification</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 监听通知点击事件</span>\nself<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;notificationclick&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;点击了通知&#39;</span><span class="token punctuation">)</span>\n  event<span class="token punctuation">.</span>notification<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>clients<span class="token punctuation">.</span><span class="token function">openWindow</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.baidu.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>现在我们就可以通过 Chrome 调试工具来测试推送了，点击 push 就能收到一条推送了</p><p><img src="https://i.loli.net/2019/07/22/5d35d9ff3f3d753008.png" alt="屏幕快照 2019-07-22 23.43.44.png"></p><p><strong>屏幕快照 2019-07-22 23.43.44.png</strong></p><h4 id="_3-服务端代码"><a class="header-anchor" href="#_3-服务端代码" aria-hidden="true">#</a> 3. 服务端代码</h4><p>以下是简单的 nodejs 服务端代码，在本地运行后就可以通过 postman 掉接口的形式来测试推送。经测试，Firefox 和 EDGE 能收到 postman 调接口发起的推送，Chrome 浏览器直接就超时了。</p><p>app.js</p><div class="language-js"><pre><code><span class="token comment">// app.js</span>\n<span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa2-cors&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> koaBody <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-body&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./router&#39;</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">koaBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span>pushRouter<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3333</span><span class="token punctuation">)</span>\n</code></pre></div><p>router.js</p><div class="language-js"><pre><code><span class="token keyword">const</span> webpush <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;web-push&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-router&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> insert<span class="token punctuation">,</span> query <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../lib/query&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> pushRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  prefix<span class="token operator">:</span> <span class="token string">&#39;/api&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\npushRouter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/appkey&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 使用 webpush 生成密钥对，并保存到数据库</span>\n  <span class="token keyword">const</span> vapidKeys <span class="token operator">=</span> webpush<span class="token punctuation">.</span><span class="token function">generateVAPIDKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token string">&#39;insert into `keys` (publicKey,privateKey) VALUES(?,?)&#39;</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> addParams <span class="token operator">=</span> <span class="token punctuation">[</span>vapidKeys<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> vapidKeys<span class="token punctuation">.</span>privateKey<span class="token punctuation">]</span>\n    <span class="token keyword">await</span> <span class="token function">insert</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> addParams<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>\n    publicKey<span class="token operator">:</span> vapidKeys<span class="token punctuation">.</span>publicKey\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;appKey&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\npushRouter<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/subscribe&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> subscription<span class="token punctuation">,</span> publicKey <span class="token punctuation">}</span> <span class="token operator">=</span> data\n  <span class="token keyword">const</span> queryId <span class="token operator">=</span> <span class="token string">&#39;select id from `keys` where publicKey=&#39;</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>publicKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;</span><span class="token template-punctuation string">`</span></span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>result<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">query</span><span class="token punctuation">(</span>queryId<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> result\n  <span class="token keyword">const</span> sql <span class="token operator">=</span>\n    <span class="token string">&#39;INSERT INTO `subscription` (id,publicKey,`subscription`) VALUES(?,?,?)&#39;</span>\n  <span class="token keyword">const</span> addParams <span class="token operator">=</span> <span class="token punctuation">[</span>id<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>publicKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> subscription<span class="token punctuation">]</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token function">insert</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> addParams<span class="token punctuation">)</span>\n    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> err\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\npushRouter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/send&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> querySql <span class="token operator">=</span> <span class="token string">&#39;SELECT * FROM subscription&#39;</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">query</span><span class="token punctuation">(</span>querySql<span class="token punctuation">)</span>\n  <span class="token comment">// 取出数据库中存的所有subscription，进行push推送</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> publicKey<span class="token punctuation">,</span> subscription <span class="token punctuation">}</span> <span class="token operator">=</span> item\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> privateKey <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">query</span><span class="token punctuation">(</span>\n      <span class="token string">&#39;SELECT privateKey FROM `keys` WHERE publicKey=&#39;</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>publicKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;</span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> subscription<span class="token punctuation">)</span>\n    webpush<span class="token punctuation">.</span><span class="token function">setVapidDetails</span><span class="token punctuation">(</span><span class="token string">&#39;mailto:urlOrEmailaddress&#39;</span><span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span>\n\n    webpush\n      <span class="token punctuation">.</span><span class="token function">sendNotification</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>subscription<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  pushRouter\n<span class="token punctuation">}</span>\n</code></pre></div><p>数据库查询与插入</p><div class="language-js"><pre><code><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  host<span class="token operator">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>\n  user<span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>\n  password<span class="token operator">:</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span>\n  database<span class="token operator">:</span> <span class="token string">&#39;test&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nconnection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">insert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">sql<span class="token punctuation">,</span> addParams</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> addParams<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">query</span> <span class="token operator">=</span> <span class="token parameter">sql</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  insert<span class="token punctuation">,</span>\n  query\n<span class="token punctuation">}</span>\n</code></pre></div>',41);t.render=function(a,p,t,e,c,u){return n(),s("div",null,[o])};export default t;export{p as __pageData};
