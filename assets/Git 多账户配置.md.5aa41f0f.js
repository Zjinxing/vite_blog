import{o as a,c as t,a as e}from"./app.d2162012.js";const i='{"title":"Git 多账户配置","description":"","frontmatter":{"title":"Git 多账户配置","date":"2021-10-08","tags":["git"],"describe":"对于我们开发人员来说已经是必不可少的工具了，几乎每一个开发者都在GitHub上有一个账号，但是工作的时候一般都是内网的 Gitlab，这就不可避免的需要在不同的账号之前切换，每次都 git config 的话会很麻烦，如果你不知道怎么一劳永逸的解决账号切换的问题，那就往下看看吧。"},"headers":[{"level":2,"title":"Git 多账户配置","slug":"git-多账户配置"},{"level":3,"title":"方案一：单个仓库配置","slug":"方案一：单个仓库配置"},{"level":3,"title":"方案二：根据工作区配置","slug":"方案二：根据工作区配置"}],"relativePath":"Git 多账户配置.md","lastUpdated":1633703210761}',n={},s=[e('<h2 id="git-多账户配置"><a class="header-anchor" href="#git-多账户配置" aria-hidden="true">#</a> Git 多账户配置</h2><blockquote><p>Git 对于我们开发人员来说已经是必不可少的工具了，几乎每一个开发者都在GitHub上有一个账号，但是工作的时候一般都是内网的 Gitlab，这就不可避免的需要在不同的账号之前切换，每次都 git config 的话会很麻烦，如果你不知道怎么一劳永逸的解决账号切换的问题，那就往下看看吧。</p></blockquote><h3 id="方案一：单个仓库配置"><a class="header-anchor" href="#方案一：单个仓库配置" aria-hidden="true">#</a> 方案一：单个仓库配置</h3><p>我们在配置 git 的时候，如果加上 <code>--global</code> 参数，说明是全局配置，相应的配置会体现在 ~/.gitconfig 文件的变动上，如果不加则是对单个项目的配置。比如在某个仓库下执行：</p><div class="language-sh"><pre><code>git config user.name USER\ngit config user.email EMAIL\n</code></pre></div><p>这样则会为当前仓库配置一个不同于全局配置的用户，虽然这样可以切换账号，但是只对当前仓库生效，每次从远端克隆一个仓库都要根据不同情况判断是不是需要更改用户，很不方便。</p><h3 id="方案二：根据工作区配置"><a class="header-anchor" href="#方案二：根据工作区配置" aria-hidden="true">#</a> 方案二：根据工作区配置</h3><p>从 git 2.13.0 开始，git 的配置文件开始支持 conditional includes 的配置，我们可以用这一点实现不同目录不同配置。</p><p>首先在用户目录下创建两个文件，分别对应个人配置和工作配置</p><div class="language-sh"><pre><code>touch ~/.gitconfig-work ~/.gitconfig-personal\n</code></pre></div><img src="https://cdn.jsdelivr.net/gh/Zjinxing/image-galary@master/blog/%E6%88%AA%E5%B1%8F2021-09-27%20%E4%B8%8B%E5%8D%8811.45.49.png" alt="截屏2021-09-27 下午11.45.49" style="zoom:67%;"><p>然后在编辑 <code>.gitconfig</code> 文件，在其中加入以下配置：</p><div class="language-bash"><pre><code><span class="token punctuation">[</span>includeIf <span class="token string">&quot;gitdir:/path/to/work/directory/&quot;</span><span class="token punctuation">]</span>\n  path <span class="token operator">=</span> ~/.gitconfig-work\n<span class="token punctuation">[</span>includeIf <span class="token string">&quot;gitdir:/path/to/personal/directory&quot;</span><span class="token punctuation">]</span>\n  path <span class="token operator">=</span> ~/.gitconfig-personal\n</code></pre></div><p>然后我们在 work 目录下初始化一个仓库，然后进入这个仓库，在终端输入以下命令查看配置是否成功：</p><div class="language-bash"><pre><code><span class="token function">git</span> config --show-origin --get user.name\n</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/Zjinxing/image-galary@master/blog/image-20211008215553896.png" alt="image-20211008215553896"></p><p>可以看到我们的配置是来自 <code>.gitconfig-work</code> 文件的，说明配置已经生效了，以后工作相关的项目就放到 work 目录下，个人的项目放到 personal 目录下，就不用对每个仓库进行单独配置了，这是不是就方便多了。</p>',17)];n.render=function(e,i,n,o,r,c){return a(),t("div",null,s)};export{i as __pageData,n as default};
