import{o as n,c as s,a}from"./app.d2162012.js";const t='{"title":"使用vue实现一个聊天输入框","description":"","frontmatter":{"title":"使用vue实现一个聊天输入框","date":"2019-09-28","tags":["vue","JavaScript"],"describe":"最近工作需要在产品中集成即时通讯功能，在聊天输入框的实现过程中踩了不少坑，在此记录一下"},"headers":[{"level":3,"title":"实现的功能","slug":"实现的功能"},{"level":3,"title":"预览地址","slug":"预览地址"},{"level":3,"title":"使用的第三方库","slug":"使用的第三方库"},{"level":3,"title":"具体实现","slug":"具体实现"}],"relativePath":"chat-input.md","lastUpdated":1633953827585}',p={},o=[a('<p><em>最近工作需要在产品中集成即时通讯功能，在聊天输入框的实现过程中踩了不少坑，在此记录一下</em></p><h3 id="实现的功能"><a class="header-anchor" href="#实现的功能" aria-hidden="true">#</a> 实现的功能</h3><ul><li>插入表情</li><li>插入图片</li><li><code>ctrl + enter</code> 换行</li><li><code>@</code> 提醒</li></ul><h3 id="预览地址"><a class="header-anchor" href="#预览地址" aria-hidden="true">#</a> 预览地址</h3><p><a href="https://codesandbox.io/s/vue-template-fdn21" target="_blank" rel="noopener noreferrer">https://codesandbox.io/s/vue-template-fdn21</a></p><h3 id="使用的第三方库"><a class="header-anchor" href="#使用的第三方库" aria-hidden="true">#</a> 使用的第三方库</h3><ul><li>twemoji：tweeter 的 emoji 库，用于实现表情的插入</li><li>element-ui：部分样式使用element-ui实现</li></ul><h3 id="具体实现"><a class="header-anchor" href="#具体实现" aria-hidden="true">#</a> 具体实现</h3><h4 id="基本输入功能"><a class="header-anchor" href="#基本输入功能" aria-hidden="true">#</a> 基本输入功能</h4><blockquote><p>由于需要在输入框中插入图片，因此使用普通的 textarea 文本输入框肯定难以实现了，因此考虑使用 <code>div + contenteditable</code> 来实现输入框。首先创建一个空的 <code>vue</code> 项目，在<code>components</code> 文件夹下新建<code>Editor.vue</code>， 基本的html 和 css 如下：</p></blockquote><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>editor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>editor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>editor-tools<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>editorContent<span class="token punctuation">&quot;</span></span> <span class="token attr-name">contenteditable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>editor-content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylus<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n<span class="token selector">.editor</span> <span class="token punctuation">{</span>\n  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n  <span class="token property">padding-top</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>\n  <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>\n  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #acacac<span class="token punctuation">;</span>\n  <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>\n  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>\n\n  <span class="token selector">&amp;-tools</span> <span class="token punctuation">{</span>\n    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>\n    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>\n    <span class="token property">padding</span><span class="token punctuation">:</span> 3px 5px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token selector">&amp;-content</span> <span class="token punctuation">{</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n    <span class="token property">min-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n    <span class="token property">min-height</span><span class="token punctuation">:</span> 220px<span class="token punctuation">;</span>\n    <span class="token property">padding</span><span class="token punctuation">:</span> 3px 5px<span class="token punctuation">;</span>\n    <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><img src="https://i.loli.net/2019/09/28/4MabvKACJ92ld6X.png" alt="微信截图_20190928121434.png"></p><h4 id="插入-emoji"><a class="header-anchor" href="#插入-emoji" aria-hidden="true">#</a> 插入 emoji</h4><p>根据 <code>twemoji</code> 的文档，我们可以用 <code>twemoji.parse()</code> 方法将 <code>emoji</code> 的 utf-16 编码码解析为 <code>twemoji</code> 提供的 <code>emoji</code> 图片，所以首先需要取得需要使用的表情的 utf-16编码，<code>twemoji.convert.fromCodePoint()</code> 提供了一个将 <code>hex</code>编码转为 <code>utf-16</code> 的方法，而这个库中的图片都是以 <code>emoji</code> 对应的 <code>hex</code> 编码命名的，因此我们可以通过 <code>nodejs</code> 简单的批量获取我们所需要的emoji编码:</p><ol><li><p>从 <code>twemoji</code> 库中下载需要的图片，放到一个文件夹中，命名 <code>images</code></p></li><li><p>然后新建一个文件夹，将 <code>images</code> 文件夹放到新建的文件夹中</p></li><li><p>在新建的文件夹中执行 <code>yarn add twemoji</code> 命令，安装 <code>twemoji</code></p></li><li><p>新建 <code>app.js</code> 文件，内容如下：</p><div class="language-js"><pre><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> folder <span class="token operator">=</span> <span class="token string">&#39;./images&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> nameArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> twemoji <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;twemoji&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nfs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> code <span class="token operator">=</span> twemoji<span class="token punctuation">.</span>convert<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    nameArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameArr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> nameArr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">{&quot;emojiArr&quot;: [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>nameArr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]}</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;./emoji.json&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;write complete&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li><li><p>运行 <code>app.js</code> 将得到一个 <code>emoji.json</code> 文件，这就是我们输入<code>emoji</code> 需要用到的。</p></li></ol><p>然后回到我们的项目中，在 <code>main.js</code> 添加一个自定义指令：</p><div class="language-js"><pre><code>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;emoji&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> twemoji<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>然后将 <code>emoji.json</code> 放到项目中，在<code>components</code> 下创建一个 <code>Emoji.vue</code> 文件：</p><div class="language-vue"><pre><code><span class="token comment">&lt;!---- Emoji 表情 -----&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>emoji-wrapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-emoji</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in emojiArr<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>emoji-item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectEmoji(item)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> emojiArr <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../assets/emoji.json&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      emojiArr<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">selectEmoji</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;select-emoji&#39;</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylus<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n<span class="token selector">.emoji-wrapper</span> <span class="token punctuation">{</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 390px<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n  <span class="token property">overflow-y</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span>\n\n  <span class="token selector">.emoji-item</span> <span class="token punctuation">{</span>\n    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>\n\n    <span class="token selector">&amp; &gt;&gt;&gt; img</span> <span class="token punctuation">{</span>\n      <span class="token property">width</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>\n      <span class="token property">height</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>\n      <span class="token property">padding</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>接下来就可以在 <code>Editor.vue</code> 中使用 <code>emoji</code> 了。有一点需要注意的是：在选择 <code>emoji</code> 的时候要保持输入框不失去焦点，还有@提醒的时候也是，因此在输入框获取焦点的时候需要监听<code>mousedown</code>事件，如果是选择<code>emoji</code> 或者是@成员时则需要阻止输入框失去焦点，当输入框失去焦点时再移除事件监听。</p><p>插入 <code>emoji</code> 的方法：</p><div class="language-js"><pre><code><span class="token function">onSelectEmoji</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>editorContent\n      el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 防止输入框没有焦点时表情被插入到其他位置，因此在此处先获取焦点</span>\n      <span class="token keyword">const</span> sel <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> range <span class="token operator">=</span> sel<span class="token punctuation">.</span><span class="token function">getRangeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> textNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>\n      range<span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>textNode<span class="token punctuation">)</span>\n      sel<span class="token punctuation">.</span><span class="token function">removeAllRanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      range<span class="token punctuation">.</span><span class="token function">collapse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      sel<span class="token punctuation">.</span><span class="token function">addRange</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre></div><p><code>getSelection()</code> 方法获取的是一个对象，表示用户选择的文本范围或光标的当前位置，它代表页面中的文本选区，<code>getRangeAt</code> 获取的是一个<code>Range</code>，当我们点击emoji时，以emoji的编码创建一个文本节点，再讲此文本节点插入到range中，再将range添加到selection中便完成了表情的插入。</p><h4 id="ctrl-enter-换行的实现"><a class="header-anchor" href="#ctrl-enter-换行的实现" aria-hidden="true">#</a> ctrl + enter 换行的实现</h4><p>既然是使用的 <code>div</code> 标签实现的输入框，换行首先想到的是插入一个 <code>&lt;br /&gt;</code> 标签，但是实现的时候却发现需要按两次 <code>ctrl + enter</code> 才能实现换行，检查元素发现两个 <code>br</code>, 一个在第一行末尾，另一个在第二行，后来在插入<code>br</code> 标签后，又在<code>br</code>后插入一个<code>\\u00a0</code> 的空格，然后再执行 <code>delete</code> 命令实现换行，代码如下：</p><div class="language-js"><pre><code><span class="token comment">// ctrl + enter 换行</span>\n    <span class="token function">lineBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> selection <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> range <span class="token operator">=</span> selection<span class="token punctuation">.</span><span class="token function">getRangeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> br <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;br&#39;</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> textNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&#39;\\u00a0&#39;</span><span class="token punctuation">)</span>\n      range<span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>br<span class="token punctuation">)</span>\n      range<span class="token punctuation">.</span><span class="token function">collapse</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n      range<span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>textNode<span class="token punctuation">)</span>\n      range<span class="token punctuation">.</span><span class="token function">selectNodeContents</span><span class="token punctuation">(</span>textNode<span class="token punctuation">)</span>\n      selection<span class="token punctuation">.</span><span class="token function">removeAllRanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      selection<span class="token punctuation">.</span><span class="token function">addRange</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span>\n      document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">&#39;delete&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre></div><h4 id="提醒的实现"><a class="header-anchor" href="#提醒的实现" aria-hidden="true">#</a> @提醒的实现</h4><p>微信中的@提醒在插入后如果删除的话是整体删除的，这里的实现方案是在用户选中@的成员后，创建一个canvas，通过canvas将文字转为图片，替换掉 <code>@</code> 符号以及 <code>@</code> 符号之后的文字，实现的核心代码如下：</p><div class="language-js"><pre><code><span class="token function">insertMention</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> sel <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> range <span class="token operator">=</span> sel<span class="token punctuation">.</span><span class="token function">getRangeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span>\n      <span class="token comment">// 删除@符号后的字符的方法</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteMentionChar</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span>\n      <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>editorContent\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> fontSize<span class="token punctuation">,</span> fontFamily<span class="token punctuation">,</span> color <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>\n      <span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;canvas&#39;</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> width <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">6</span>\n      <span class="token keyword">const</span> height <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">6</span>\n      canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> width\n      canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> height\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHighRes</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span> <span class="token comment">// 这里是一个处理高分辨率屏幕下图片模糊的转换方法</span>\n      <span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span>\n      ctx<span class="token punctuation">.</span>textBaseline <span class="token operator">=</span> <span class="token string">&#39;top&#39;</span>\n      ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fontSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fontFamily<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n      ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> color\n      ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n      ctx<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> dataURL <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span>\n      img<span class="token punctuation">.</span>src <span class="token operator">=</span> dataURL\n      <span class="token comment">// 给img标签添加自定义属性，方便取得被@成员的id</span>\n      img<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-name&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n      img<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-id&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>\n      img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>verticalAlign <span class="token operator">=</span> <span class="token string">&#39;middle&#39;</span>\n      img<span class="token punctuation">.</span>width <span class="token operator">=</span> width\n      img<span class="token punctuation">.</span>height <span class="token operator">=</span> height\n      sel<span class="token punctuation">.</span><span class="token function">removeAllRanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      range<span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>\n      range<span class="token punctuation">.</span><span class="token function">collapse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      sel<span class="token punctuation">.</span><span class="token function">addRange</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>memberListVisible <span class="token operator">=</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre></div><p>@提醒另外一个需要注意的地方是@列表出现的位置，因此需要在输入@符号之后获取光标在屏幕上的位置，将成员列表显示在正确的位置。因此需要监听<code>@</code> 的键盘事件，监听到<code>@</code>输入，计算光标位置:</p><div class="language-"><pre><code>// 输入@字符获取光标相对父元素的位置\n    onMention() {\n      const el = this.$refs.editor\n      const sel = document.getSelection()\n      const range = sel.getRangeAt(0)\n      const [rect] = range.getClientRects()\n      const [content] = el.getClientRects()\n      const left = rect.x - content.x\n      const top = rect.y - content.y\n      const memberListEle = this.$refs.memberList\n      memberListEle.style.left = `${left}px`\n      memberListEle.style.top = `${top + 19}px`\n      this.memberListVisible = true\n    },\n</code></pre></div><p>首先我们通过<code>range.getClientRects()</code> 光标相对于窗口的位置，然后在获取输入框相对于屏幕的位置，这样就能获取到光标相对于输入框的位置，就能正确定位成员列表需要显示的位置了。</p><h4 id="效果图及demo-预览"><a class="header-anchor" href="#效果图及demo-预览" aria-hidden="true">#</a> 效果图及demo 预览</h4><p>效果图</p><p><img src="https://i.loli.net/2019/09/28/WnlVGgRHPKX8Odp.gif" alt="111111.gif"></p><p>更多细节及在线demo预览详见 <a href="https://codesandbox.io/s/vue-template-fdn21" target="_blank" rel="noopener noreferrer">https://codesandbox.io/s/vue-template-fdn21</a></p>',36)];p.render=function(a,t,p,e,c,u){return n(),s("div",null,o)};export{t as __pageData,p as default};
