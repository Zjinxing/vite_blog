import{o as n,c as s,a}from"./app.909455a0.js";const p='{"title":"js实现快速排序和冒泡排序","description":"","frontmatter":{"title":"js实现快速排序和冒泡排序","date":"2018-12-14","tags":["JavaScript"]},"headers":[{"level":2,"title":"1、冒泡排序","slug":"_1、冒泡排序"},{"level":3,"title":"原理","slug":"原理"},{"level":2,"title":"2、快速排序","slug":"_2、快速排序"},{"level":3,"title":"原理","slug":"原理-1"},{"level":2,"title":"另外再加一个和排序无关的","slug":"另外再加一个和排序无关的"}],"relativePath":"bubblesort.md","lastUpdated":1624071737577}',t={},o=a('<h2 id="_1、冒泡排序"><a class="header-anchor" href="#_1、冒泡排序" aria-hidden="true">#</a> 1、冒泡排序</h2><h3 id="原理"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h3><p>冒泡排序是对数组进行循环，比较相邻的两个元素的大小，如果前面的比后面的大，则交换两个元素。比如一个数组[4,2,7,3,1,5,6]，第一次比较第0项和第1项，4和2，4比2大，则4和2交换位置，第二次比较第1项和第2项，此时第2项已经是4了，4和7比较，7大，则位置不变，第三次比较第2项和第3项，7比3大，则7和3交换位置……这样第一次循环结束后最大的值就排到了最后一项，也就是7排到了最后。然后开始第二次循环，第二次循环时就不用比较第5项和第6项了，因为上次循环结束后，第6项已经是最大的7了，第二次循环比第一次循环的比较次数就少了一次。这样循环6次之后就完成了排序。写成js就是下面这样：</p><div class="language-js"><pre><code><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>\n<span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>\n                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> arr\n<span class="token punctuation">}</span>\n<span class="token function">bubbleSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token comment">// [1,2,3,4,5,6,7]</span>\n</code></pre></div><h2 id="_2、快速排序"><a class="header-anchor" href="#_2、快速排序" aria-hidden="true">#</a> 2、快速排序</h2><h3 id="原理-1"><a class="header-anchor" href="#原理-1" aria-hidden="true">#</a> 原理</h3><p>快速排序和二分查找原理比较类似。快速排序使用了递归的方法，首先判断数组长度，如果小于等于1则直接返回数组。否则先从数组中选出一个元素，这个数字可以是数组中的任意一个元素，然后声明两个空数组，比较数组中的每一项和选出的元素大小，比选出元素小的放如一个数组，比选出元素小的放入另一个数组，这样数组就被分成了3部分，较小的一部分，被选中元素和较大的一部分，然后再对两个数组进行同样的操作。比如[4, 2, 7, 3, 1, 5, 6]，假设选中的数字是4，则数组就被分成了[2,3,1]、4、[7,5,6]，直到被分割的数组长度都等1的时候也就完成了排序。</p><div class="language-js"><pre><code><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>\n<span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> arr\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> mIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 生成一个随机数，范围0到arr.length-1</span>\n    <span class="token keyword">let</span> m <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>mIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 取出数组中的此项</span>\n    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span>  <span class="token punctuation">{</span>\n            right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token comment">// [1,2,3,4,5,6,7]</span>\n</code></pre></div><p></p><h2 id="另外再加一个和排序无关的"><a class="header-anchor" href="#另外再加一个和排序无关的" aria-hidden="true">#</a> 另外再加一个和排序无关的</h2><p>最近遇到的一个面试题，要求生成一个6位数密码，要求有5个数字，一个小写字母。这个需要用到ascii码转字符，当时没想到ascii转字符的方法，就写了一个包含所有小写字母的数组……</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">password</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 声明一个空数组，用于存放密码</span>\n    <span class="token keyword">let</span> <span class="token function-variable function">num</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 生成一个0到9的随机数</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 先存入5个数字进去</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> ascii <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">97</span> <span class="token comment">// 生成一个97到122的随机数（a-z的ascii码）</span>\n    <span class="token keyword">let</span> char <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>ascii<span class="token punctuation">)</span> <span class="token comment">// 将ascii码转为字符</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n    arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> char<span class="token punctuation">)</span> <span class="token comment">// 将小写字母随机选一个位置插入到数组中</span>\n    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 将数组转为字符串并返回</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',12);t.render=function(a,p,t,c,e,u){return n(),s("div",null,[o])};export default t;export{p as __pageData};
